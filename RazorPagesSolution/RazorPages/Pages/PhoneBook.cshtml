@page "/"
@model RazorPages.Pages.PhoneBookModel
@{
    //var id = Model.
}
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
<script>
    function grid_dataSource_beforeSend(op, ajax) {
        ajax.headers = {
            RequestVerificationToken: "@Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken"
        };
    }
</script>
@using (Html.BeginForm())
{
    using (Html.DevExtreme().ValidationGroup("main"))
    {
        @Html.AntiForgeryToken()
        @(Html.DevExtreme().DataGrid<DataModels.PhoneBook>()
        .DataSource(ds => ds.RemoteController()
            .LoadUrl(Url.Page(null, "GridData"))
            //.UpdateUrl(Url.Page(null, "GridRow"))
            //.UpdateUrl("/ContactView")
            .InsertUrl(Url.Page(null, "GridRowAdd"))
            .Key("IdPb")
            .OnBeforeSend("grid_dataSource_beforeSend")
        )
        //.Selection(s => s.Mode(SelectionMode.Single))
        .RemoteOperations(true)
        .ShowBorders(true)
        //.OnSelectionChanged("selection_changed")
        .Editing(e => e
            //.AllowUpdating(true)
            .AllowAdding(true)
            .Mode(GridEditMode.Form)
            .Form(f => f
                .Items(i => {
                    i.AddGroup()
                    .Caption("Account Info")
                    .Items(gItems => {
                        gItems.AddSimple().DataField("Name").IsRequired(true);
                        gItems.AddSimple().DataField("Patronymic").IsRequired(true);
                        gItems.AddSimple().DataField("Surname").IsRequired(true);
                        gItems.AddSimple().DataField("Phone")
                            .HelpText("Введите телефон в формате РФ")
                                .Editor(e => e.TextBox()
                                    .Mask("+7 (XXX) XXX-XX-XX")
                                    .MaskRules(new { X = new JS("/[0-9]/") })
                                    .MaskInvalidMessage("Телефон должен быть в формате РФ!")
                                    .UseMaskedValue(true)
                                )
                                .IsRequired(true);
                        gItems.AddSimple().DataField("Sex")
                            .HelpText("Выберите пол f / m")
                                .Editor(e => e.TextBox()
                                    .Mask("X")
                                    .MaskRules(new { X = new JS("/[fm]/") })
                                    .MaskInvalidMessage("Пол должен быть или f или m!")
                                    .UseMaskedValue(true)
                                )
                                .IsRequired(true);
                    });
                })
            )
        )
        .Columns(columns => {

            columns.AddFor(m => m.Name);

            columns.AddFor(m => m.Patronymic);

            columns.AddFor(m => m.Surname);

            columns.AddFor(m => m.Phone);

            columns.AddFor(m => m.Sex);

            columns.AddFor(m => m.IdPb).CellTemplate(new JS("getCellTemplate")).Caption("");

            })
        .ColumnAutoWidth(true)
        .WordWrapEnabled(true)
        )

    }
}


<script>
    //function selection_changed(sItem) {
    //    var data = sItem.selectedRowsData[0];
    //    if (data) {
    //        alert(data.Name);
    //    }
    //}
    function getCellTemplate(itemElement, itemData) {
        //debugger;
        itemElement.append("<a href=\"ContactView?id=" + itemData.data.IdPb + "\">View</a>");
    }
</script>