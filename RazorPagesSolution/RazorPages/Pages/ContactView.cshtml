@page
@model RazorPages.Pages.ContactViewModel
@{
}

<div class="container">
    <div class="row">
        <div class="col-sm-3 border">
            <h4>Contact info</h4>
            @using (Html.BeginForm())
            {
                using (Html.DevExtreme().ValidationGroup("main"))
                {
                    @(Html.DevExtreme().Toolbar()
                        .Items(items =>
                        {
                            items.Add()
                            .Widget(w => w
                            .Button()
                            .Icon("Edit")
                            .Text("Edit")
                            .Type(ButtonType.Danger)
                            .OnClick("enterEditMode")
                            )
                            .Location(ToolbarItemLocation.Before);
                            items.Add()
                            .Widget(w => w
                            .Button()
                            .Text("Save")
                            .Type(ButtonType.Success)
                            .UseSubmitBehavior(true)
                            )
                            .Location(ToolbarItemLocation.Before);
                        })
                    )
                    @Html.AntiForgeryToken()
                    @(Html.DevExtreme().Form<DataModels.PhoneBook>()
                        .ShowValidationSummary(true)
                        .FormData(Model.PBook)
                        .LabelLocation(FormLabelLocation.Top)
                        .ID("ContactForm")
                        .Items(items => {
                            items.AddSimpleFor(m => m.Name).IsRequired(true);

                            items.AddSimpleFor(m => m.Patronymic).IsRequired(true);

                            items.AddSimpleFor(m => m.Surname).IsRequired(true);

                            items.AddSimpleFor(m => m.Phone)
                            .HelpText("Введите телефон в формате РФ")
                            .Editor(e => e.TextBox()
                            .Mask("+7 (XXX) XXX-XX-XX")
                            .MaskRules(new { X = new JS("/[0-9]/") })
                            .MaskInvalidMessage("Телефон должен быть в формате РФ!")
                            .UseMaskedValue(true)
                            )
                            .IsRequired(true);

                            items.AddSimpleFor(m => m.Sex)
                            .HelpText("Выберите пол f / m")
                            .Editor(e => e.TextBox()
                            .Mask("X")
                            .MaskRules(new { X = new JS("/[fm]/") })
                            .MaskInvalidMessage("Пол должен быть или f или m!")
                            .UseMaskedValue(true)
                            )
                            .IsRequired(true);
                            //items.AddGroup()
                            //.Caption("Действия")
                            //.Items(gItems =>
                            //{
                            //gItems.AddButton()
                            //.ButtonOptions(b => b.Text("Save")
                            //.Type(ButtonType.Success)
                            //.UseSubmitBehavior(true)
                            //);
                            //gItems.AddButton()
                            //.ButtonOptions(b => b.Text("Edit")
                            //.Type(ButtonType.Normal)
                            //.OnClick("enterEditMode")
                            //);
                            //});
                        })
                        .ReadOnly(true)
                    )
                }
            }
        </div>

        <div class="col border">
            <h4>Contact history</h4>
            @(Html.DevExtreme().DataGrid<DataModels.PhoneBookHistory>()
                .DataSource(ds => ds.RemoteController()
                    .LoadUrl(Url.Page(null, "ListHistory", new { id = Model.PBook.IdPb}))
                    .Key("IdPbh")
                )
                .ID("HistoryForm")
                .Columns(columns => {

                    columns.AddFor(m => m.Date).Name("Changed");

                    columns.AddFor(m => m.Name);

                    columns.AddFor(m => m.Patronymic);

                    columns.AddFor(m => m.Surname);

                    columns.AddFor(m => m.Phone);

                    columns.AddFor(m => m.Sex);
                })
                .ColumnAutoWidth(true)
                .WordWrapEnabled(true)
            )
        </div>
    </div>
</div>

<script>
    function enterEditMode(itemElement, itemData) {
        //debugger;
        var form = $("#ContactForm").dxForm("instance");
        form.option('readOnly', !form._options.readOnly);
        var type = form._options.readOnly ? "success" : "error", text = form._options.readOnly ? "Режим просмотра" : "Режим редактирования";
        DevExpress.ui.notify(text, type, 600);
    }
</script>